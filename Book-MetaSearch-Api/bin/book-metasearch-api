#!/bin/sh
#
# chkconfig: 345 99 05
# description: API layer for the Book-MetaSearch application. Exposes data for easy access by the Android app.
#
# Demon script for the Book-MetaSearch API.
#
# Before running, the JAVA_OPTS environemnt variable must be set.
# Values often set in JAVA_OPTS:
#   -Xms512M -Xmx2G
#   -Dcom.sun.org.apache.xml.internal.dtm.DTMManager=com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault
#   -Dcom.sun.management.jmxremote.port=9090
#   -Dcom.sun.management.jmxremote.ssl=false
#   -Dcom.sun.management.jmxremote.authenticate=false
#
# Derived from -
# Home page: http://www.source-code.biz
# License:   GNU/LGPL (http://www.gnu.org/licenses/lgpl.html)
# Copyright 2006 Christian d'Heureuse, Inventec Informatik AG, Switzerland.

serviceHome="/opt/book-metasearch/api"                      # location where service should be run from
serviceNameLo="book-metasearch-api"                         # service name with the first letter in lowercase
serviceName="book-metasearch-api"                           # service name
serviceUser="root"                                          # OS user name for the service
serviceGroup="root"                                         # OS group name for the service
serviceUserHome="/$serviceUser"                             # home directory of the service user
serviceLogFile="/var/log/book-metasearch/api-daemon.log"    # log file for StdOut/StdErr
maxShutdownTime=15                                          # maximum number of seconds to wait for the daemon to terminate normally
pidFile="/var/run/book-metasearch/$serviceNameLo.pid"       # name of PID file (PID = process ID number)
javaExe="java"                                              # name of the Java launcher without the path
javaCommandLineKeyword="book-metasearch"               # a keyword from the command to detect & distinguish running process


[ -r /etc/profile.d/java.sh ] && . /etc/profile.d/java.sh

# Checks that the required environment variables have been set
function validateEnvironment {
   if [[ -z $JAVA_OPTS ]]; then
      echo "Must set \$JAVA_OPTS"
      return 1
   fi

   if [ ! -f ${serviceHome}/config/api-keys.properties ]; then
       echo "Must create ${serviceHome}/config/api-keys.properties"
       return 1
   fi

   javaCommandLine="${javaExe} -server ${JAVA_OPTS} -cp \"${serviceHome}/jars/*\" net.grosinger.bookmetasearch.api.HttpListener ${serviceHome}/config/api-keys.properties"
   echo $javaCommandLine
}

# Makes the file $1 writable by the group $serviceGroup.
function makeFileWritable {
    local filename="$1"
    touch $filename || return 1
    chgrp $serviceGroup $filename || return 1
    chmod g+w $filename || return 1
    return 0; }

# Returns 0 if the process with PID $1 is running.
function checkProcessIsRunning {
    local pid="$1"
    if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
    if [ ! -e /proc/$pid ]; then return 1; fi
    return 0; }

# Returns 0 if the process with PID $1 is our Java service process.
function checkProcessIsOurService {
    local pid="$1"
    if [ "$(ps -p $pid --no-headers -o comm)" != "$javaExe" ]; then return 1; fi
    grep -q -F "$javaCommandLineKeyword" /proc/$pid/cmdline
    if [ $? -ne 0 ]; then return 1; fi
    return 0; }

# Returns 0 when the service is running and sets the variable $pid to the PID.
function getServicePID {
    if [ ! -f $pidFile ]; then return 1; fi
    pid="$(<$pidFile)"
    checkProcessIsRunning $pid || return 1
    checkProcessIsOurService $pid || return 1
    return 0; }

function startServiceProcess {
    validateEnvironment || return 1
    cd $serviceHome || return 1
    rm -f $pidFile
    makeFileWritable $pidFile || return 1
    cmd="nohup $javaCommandLine >> ${serviceLogFile} 2>&1 & echo \$! >$pidFile"
    runuser -s /bin/sh -c "$cmd" -g $serviceGroup $serviceUser || return 1
    sleep 0.1
    pid="$(<$pidFile)"
    if checkProcessIsRunning $pid; then :; else
      echo -ne "\n$serviceName start failed, see logfile."
      return 1
    fi
    return 0; }

function stopServiceProcess {
    kill $pid || return 1
    for ((i=0; i<maxShutdownTime*10; i++)); do
        checkProcessIsRunning $pid
        if [ $? -ne 0 ]; then
            rm -f $pidFile
            return 0
            fi
        sleep 0.1
        done
    echo -e "\n$serviceName did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
    kill -s KILL $pid || return 1
    local killWaitTime=15
    for ((i=0; i<killWaitTime*10; i++)); do
        checkProcessIsRunning $pid
        if [ $? -ne 0 ]; then
            rm -f $pidFile
            return 0
        fi
        sleep 0.1
        done
    echo "Error: $serviceName could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
    return 1; }

function startService {
    getServicePID
    if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; RETVAL=0; return 0; fi
    echo -n "Starting $serviceName   "
    startServiceProcess
    if [ $? -ne 0 ]; then RETVAL=1; echo "\nfailed"; return 1; fi
    echo "started PID=$pid"
    RETVAL=0
    return 0; }

function stopService {
    getServicePID
    if [ $? -ne 0 ]; then echo -n "$serviceName is not running"; RETVAL=0; echo ""; return 0; fi
    #if [ ! -w "dirname $pidFile" ]; then echo "Can not remove PID file - Permission Denied"; RETVAL=1; return 1; fi
    echo -n "Stopping $serviceName   "
    stopServiceProcess
    if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
    echo "stopped PID=$pid"
    RETVAL=0
    return 0; }

function checkServiceStatus {
    echo -n "Checking for $serviceName:   "
    if getServicePID; then
        echo "running PID=$pid"
        RETVAL=0
    else
        echo "stopped"
        RETVAL=3
    fi
    return 0; }

function main {
    source ${serviceHome}/config/environment.sh

    RETVAL=0
    case "$1" in
        start)                                               # starts the Java program as a Linux service
            startService
            ;;
        stop)                                                # stops the Java program service
            stopService
            ;;
        restart)                                             # stops and restarts the service
            stopService && startService
            ;;
        status)                                              # displays the service status
            checkServiceStatus
            ;;
        *)
            echo "Usage: $0 {start|stop|restart|status}"
            exit 1
            ;;
        esac
    exit $RETVAL
}

main $1